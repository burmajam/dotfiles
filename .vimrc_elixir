" Ignore _build folder in CommandT searches
:set wildignore+=_build,deps

" Insert a function documentation sceleton with <ctrl-i><ctrl-d>
imap <C-I><C-D> @doc """<cr>"""<esc>O
imap <C-I><C-M> @moduledoc """<cr>"""<esc>O
imap <C-I><C-E> <cr>## Example<cr>    iex><space>

map <leader>r :w\|:!elixir %<CR>
map <leader>x :w\|:!iex -S mix<CR>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MAPS TO JUMP TO SPECIFIC COMMAND-T TARGETS AND FILES
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <leader>gr :topleft :split web/router.ex<cr>
function! ShowRoutes()
  " Requires 'scratch' plugin
  :topleft 100 :split __Routes__
  " Make sure Vim doesn't write __Routes__ as a file
  :set buftype=nofile
  " Delete everything
  :normal 1GdG
  " Put routes output in buffer
  :0r! mix phoenix.routes
  " Size window to number of lines (1 plus rake output length)
  :exec ":normal " . line("$") . _ "
  " Move cursor to bottom
  :normal 1GG
  " Delete empty trailing line
  :normal dd
endfunction
map <leader>gR :call ShowRoutes()<cr>
map <leader>gl :CommandTFlush<cr>\|:CommandT lib<cr>
map <leader>gg :topleft 100 :split mix.exs<cr>
" Phoenix specific
map <leader>gv :CommandTFlush<cr>\|:CommandT web/views<cr>
map <leader>gt :CommandTFlush<cr>\|:CommandT web/templates<cr>
map <leader>gc :CommandTFlush<cr>\|:CommandT web/controllers<cr>
map <leader>gm :CommandTFlush<cr>\|:CommandT web/models<cr>
map <leader>gp :CommandTFlush<cr>\|:CommandT priv<cr>
map <leader>gs :CommandTFlush<cr>\|:CommandT priv/static/css<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SWITCH BETWEEN TEST AND PRODUCTION CODE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! OpenTestAlternate()
  let new_file = AlternateForCurrentFile()
  exec ':e ' . new_file
endfunction
function! AlternateForCurrentFile()
  let current_file = expand("%")
  let new_file = current_file
  let in_spec = match(current_file, '^test/') != -1
  let going_to_spec = !in_spec
  let in_app = match(current_file, '\<lib\>') != -1
  if going_to_spec
    if in_app
      let new_file = substitute(new_file, '^lib/', '', '')
    end
    let new_file = substitute(new_file, '\.ex$', '_test.exs', '')
    let new_file = 'test/' . new_file
  else
    let new_file = substitute(new_file, '_test\.exs$', '.ex', '')
    let new_file = substitute(new_file, '^test/', '', '')
    let new_file = 'lib/' . new_file
  endif
  return new_file
endfunction
nnoremap <leader>. :call OpenTestAlternate()<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RUNNING TESTS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RunTestFile(...)
    if a:0
        let command_suffix = a:1
    else
        let command_suffix = ""
    endif

    " Run the tests for the previously-marked file.
    let in_test_file = match(expand("%"), '\(_test.exs\)$') != -1
    if in_test_file
        call SetTestFile()
    elseif !exists("t:grb_test_file")
        return
    end
    call RunTests(t:grb_test_file . command_suffix)
endfunction

function! RunNearestTest()
    let spec_line_number = line('.')
    call RunTestFile(":" . spec_line_number . " -b")
endfunction

function! SetTestFile()
    " Set the spec file that tests will be run for.
    let t:grb_test_file=@%
endfunction

function! RunTests(filename)
    " Write the file and run tests for the given filename
    :w
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    if filereadable("script/test")
        exec ":!script/test " . a:filename
    else
        exec ":!mix test " . a:filename
    end
endfunction

